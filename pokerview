#Imports
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtSvg import *
from PyQt5 import QtCore
from pokermodel import *

class TableScene(QGraphicsScene):
    def __init__(self):
        super().__init__()
        self.tile = QPixmap('cards/table.png')
        self.setBackgroundBrush(QBrush(self.tile))

class CardItem(QGraphicsSvgItem):
    """ A simple overloaded QGraphicsSvgItem that also stores the card position """
    def __init__(self, renderer, position):
        super().__init__()
        self.setSharedRenderer(renderer)
        self.position = position

def read_cards():
    """
    Reads all the 52 cards from files.
    :return: Dictionary of SVG renderers
    """
    all_cards = dict()  # Dictionaries let us have convenient mappings between cards and their images
    for suit_file, suit in zip('CDHS', range(4)):
        for value_file, value in zip(['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'], range(2, 15)):
            file = value_file + suit_file
            key = (value, suit)  # I'm choosing this tuple to be the key for this dictionary
            all_cards[key] = QSvgRenderer('cards/' + file + '.svg')
    return all_cards

class CardsView(QGraphicsView):
    """ A View widget that represents the table area displaying a players cards. """
    # We read all the card graphics as static class variables
    back_card = QSvgRenderer('cards/Red_Back_2.svg')
    all_cards = read_cards()

    def __init__(self, cards_model: CardsModel, card_spacing: int = 250, padding: int = ()):
        """
        Initializes the view to display the content of the given model
        :param cards_model: A model that represents a set of cards. Needs to support the CardsModel interface.
        :param card_spacing: Spacing between the visualized cards.
        :param padding: Padding of table area around the visualized cards.
        """
        self.scene = TableScene()
        super().__init__(self.scene)

        self.card_spacing = card_spacing
        self.padding = padding

        # Note that this viewer doesn't care about whether this is Hand, or a "Table" or a "Deck".
        # It only knows how to display a set of cards
        self.model = cards_model
        # Whenever this window should update, it should call the "__change_cards" method.
        # This can, for example, be done by connecting it to a signal.
        # The view can listen to changes:
        self.model.new_cards.connect(self.__change_cards)

        # Add the cards the first time around to represent the initial state.
        self.__change_cards()

    def __change_cards(self):  # the double underscore is used to indicate that this is a private method.
        # Add the cards from scratch
        self.scene.clear()
        for i, card in enumerate(self.model):
            # The ID of the card in the dictionary of images is a tuple with (value, suit), both integers
            graphics_key = (card.get_value(), card.suit.value)
            # change to card.suit.value from card.suit
            renderer = self.back_card if self.model.flipped() else self.all_cards[graphics_key]
            c = CardItem(renderer, i)

            # Shadow effects
            shadow = QGraphicsDropShadowEffect(c)
            shadow.setBlurRadius(10.)
            shadow.setOffset(10, 10)
            shadow.setColor(QColor(0, 0, 0, 180))  # Semi-transparent black!
            c.setGraphicsEffect(shadow)

            # Place the cards on the default positions
            c.setPos(c.position * self.card_spacing, 0)
            self.scene.addItem(c)

    def update_view(self):
        scale = (self.viewport().height()-2*self.padding)/(313*1.25)
        self.resetTransform()
        self.scale(scale, scale)

    def resizeEvent(self, painter):
        # This method is called when the window is resized.
        self.update_view()
        super().resizeEvent(painter)


class MyTableView(QGroupBox):
    def __init__(self, game):
        super().__init__('Table')

        table_layout = QVBoxLayout()
        self.setLayout(table_layout)
        table_layout.addWidget(TableContent(game))
        table_layout.addWidget(CardsView(game.table, card_spacing=250,padding=10))

        self.update_view()

    def update_view(self):
        pass

class TableContent(QGroupBox):
    def __init__(self, game):
        super().__init__()
        self.game = game
        tablecontent_layout = QVBoxLayout()
        self.setLayout(tablecontent_layout)

        #Total pot
        totalpot_layout = QHBoxLayout()
        self.total_pot = QLabel(f"Total pot: {self.game.pot} sek")

        totalpot_layout.addWidget(self.total_pot)
        totalpot_layout.setAlignment(Qt.AlignCenter)

        #Player bets
        playerbets_layout = QHBoxLayout()
        """
        self.p1bet_label = QLabel(f"Player 1's bet amount this round: {self.game.players[0].bet}     ")
        print(self.game.players[0].bet)
        self.p2bet_label = QLabel(f"Player 2's bet amount this round: {self.game.players[1].bet}")
        playerbets_layout.addWidget(self.p1bet_label)
        playerbets_layout.addWidget(self.p2bet_label)
        playerbets_layout.setAlignment(Qt.AlignCenter)
        """
        # Adding total pot- and player bets layouts togheter
        tablecontent_layout.addLayout(totalpot_layout)
        tablecontent_layout.addLayout(playerbets_layout)

        # Connect logic
   #    self.game.players[self.game.turn].balance_changed.connect(self.bet_change)
        self.game.money_changed.connect(self.update_view)
    """
    def bet_change(self):
        print("BET CHANGE CALLED")
        print(self.game.players[0].bet)
        self.p1bet_label.setText(f"Player 1's bet amount this round: {self.game.players[0].bet}")
        self.p2bet_label.setText(f"Player 1's bet amount this round: {self.game.players[1].bet}")     
    """

    def update_view(self):
        self.total_pot.setText(f"Total pot: {self.game.pot} sek")

class PlayersActionView(QGroupBox):
    def __init__(self, game):
        super().__init__('Players')

        playeraction_layout = QHBoxLayout()
        self.setLayout(playeraction_layout)

        playeraction_layout.addWidget(PlayerView(0, game))
        playeraction_layout.addWidget(ActionView(game))
        playeraction_layout.addWidget(PlayerView(1, game))


class ActionView(QGroupBox):
    def __init__(self, game):
        super().__init__('Action Buttons')
        self.game = game
        self.active_player = self.game.turn
        self.player_balance = game.players[self.active_player].money_amount
        action_layout = QVBoxLayout()
        self.setLayout(action_layout)


        # Call/Raise Bet/Fold Action Section

        self.call_button = QPushButton(f"Call")
        self.call_button.setFixedSize(QtCore.QSize(200, 110))
        action_layout.addWidget(self.call_button)
        action_layout.setAlignment(Qt.AlignCenter)

        self.raise_bet_button = QPushButton(f"Bet")
        self.raise_bet_button.setFixedSize(QtCore.QSize(200, 110))
        action_layout.addWidget(self.raise_bet_button)
        action_layout.setAlignment(Qt.AlignCenter)

        # Bet amount
        self.bet_box = QSpinBox(self)
        self.bet_box.setMinimum(50)
        if self.game.players[self.game.turn].money_amount > self.game.players[self.game.notturn].money_amount:
            self.bet_box.setMaximum(self.game.players[self.game.notturn].money_amount)
        else:
            self.bet_box.setMaximum(self.game.players[self.game.turn].money_amount)
        self.bet_box.setSingleStep(50)
        self.bet_box.setPrefix("Raise Bet: ")
        self.bet_box.setSuffix("SEK")
        self.bet_box.setFixedSize(QtCore.QSize(200, 90))
        action_layout.addWidget(self.bet_box)

        self.fold_button = QPushButton(f"Fold")
        self.fold_button.setFixedSize(QtCore.QSize(200, 110))
        action_layout.addWidget(self.fold_button)
        action_layout.setAlignment(Qt.AlignCenter)

        # Controller part

        def call_view():
            game.call()

        def raise_bet_view():
            self.value = self.bet_box.value()
            game.raise_bet(self.value)

        def fold_view():
            game.fold()

        # Connect logic
        self.game.player_turn_changed.connect(self.update_view)
        self.game.raised_twice.connect(self.remove_raise_view)
        self.game.no_raise.connect(self.add_raise_view)

        self.call_button.clicked.connect(call_view)
        self.raise_bet_button.clicked.connect(raise_bet_view)
        self.fold_button.clicked.connect(fold_view)

    def update_view(self):
        if self.game.players[self.game.turn].money_amount > self.game.players[self.game.notturn].money_amount:
            self.bet_box.setMaximum(self.game.players[self.game.notturn].money_amount)
        else:
            self.bet_box.setMaximum(self.game.players[self.game.turn].money_amount)

    def remove_raise_view(self):
        self.raise_bet_button.hide()

    def add_raise_view(self):
        self.raise_bet_button.show()


class PlayerView(QGroupBox):
    def __init__(self, whichplayer, game):
        super().__init__(game.players[whichplayer].name)

        self.player_balance = game.players[whichplayer].money_amount
        self.player_hand = game.players[whichplayer].hand
        self.game = game
        self.active_player = self.game.turn
        self.whichplayer = whichplayer

        player_view_layout = QHBoxLayout()
        self.setLayout(player_view_layout)

        #Active player/Balance/Bet-amount layout
        balancebet_layout = QVBoxLayout()
        self.active_playerlabel = QLabel("Your turn")
        balancebet_layout.addWidget(self.active_playerlabel)

        if self.whichplayer != self.active_player:
            self.active_playerlabel.hide()
        else:
            pass

        # Balance
        self.balance_label = QLabel(f"Balance: {self.player_balance} sek")

        # Adds to layout
        balancebet_layout.addWidget(self.balance_label)
        balancebet_layout.setAlignment(Qt.AlignCenter)

        # Cards/Flip
        cardsflip_layout = QVBoxLayout()

        # Flip button
        self.activebutton = QPushButton("Hide/Show Cards")
        self.activebutton.clicked.connect(self.player_hand.flip)
        cardsflip_layout.addWidget(self.activebutton)



        if self.whichplayer != self.active_player:
            self.activebutton.hide()
        else:
            pass

        # Cards on hand
        cards_on_hand = CardsView(self.player_hand, card_spacing=250, padding=10)
        cardsflip_layout.addWidget(cards_on_hand)


        # Adding layouts together
        if self.whichplayer == self.active_player:
            player_view_layout.addLayout(cardsflip_layout)
            player_view_layout.addLayout(balancebet_layout)

        else:
            player_view_layout.addLayout(balancebet_layout)
            player_view_layout.addLayout(cardsflip_layout)


        # Connect logic
        self.game.player_turn_changed.connect(self.update_view)
        self.game.money_changed.connect(self.update_view)

    def update_bet(self):
        self.game.raise_bet(self.bet_box.value())

    def update_view(self):

        if self.whichplayer != self.active_player:
            self.activebutton.show()
            self.active_playerlabel.show()
            self.balance_label.setText(f"Balance: {self.game.players[self.game.turn].money_amount} sek")
        else:
            self.balance_label.setText(f"Balance: {self.game.players[self.game.notturn].money_amount} sek")
            self.activebutton.hide()
            self.active_playerlabel.hide()
            if self.player_hand.flipped() == False:
                self.player_hand.flip()
            else:
                pass

        self.active_player = self.game.turn

class TexasHoldemView(QWidget):
    def __init__(self, game):
        super().__init__()
        self.turn = game.turn
        self.notturn = game.notturn
        self.player_hand = game.players[self.turn].hand
        self.otherplayer_hand = game.players[self.notturn].hand

        vbox = QVBoxLayout()
        vbox.addWidget(MyTableView(game))
        vbox.addWidget(PlayersActionView(game))

        self.setLayout(vbox)
        self.setWindowState(Qt.WindowMaximized)
        self.setWindowTitle("Daves Dunkers: Texas hold'em")

        # Connect logic
        game.winner_found.connect(self.alert_winner)
        game.player_ran_out_of_money.connect(self.alert_out_of_money)

    def alert_winner(self, text: str):
        self.player_hand.flip()
        self.otherplayer_hand.flip()
        msg = QMessageBox()
        msg.setText(text)
        msg.exec()
        self.player_hand.flip()
        self.otherplayer_hand.flip()

    def alert_out_of_money(self, text: str):
        msg = QMessageBox()
        msg.setText(f'{text} ran out of money!')
        msg.setInformativeText("Please visit <a href='https://stodlinjen.se/'>Stödlinjen</a> to get professional help!")
        msg.exec()

