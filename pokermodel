import abc
from PyQt5.QtCore import QObject, pyqtSignal
from cardlib import *

class QABCMeta(abc.ABCMeta, type(QObject)):
    pass

class CardsModel(QObject, metaclass=QABCMeta):
    """ Base class that described what is expected from the CardsView widget. """

    new_cards = pyqtSignal()  #: Signal should be emited when cards change.

    #warning = pyqtSignal(str)

    @abc.abstractmethod
    def __iter__(self):
        """Returns an iterator of card objects"""

    @abc.abstractmethod
    def flipped(self):
        """Returns true of cards should be drawn face down"""

    @abc.abstractmethod
    def flip(self):
        """Returns true of cards should be drawn face down"""


class TableModel(CardsModel):
    def __init__(self):
        super().__init__()
        self._cards = []

    def add_card(self, card):
        # This method mutates the object, so we must of course
        self._cards.append(card)
        self.new_cards.emit()  # something changed, better emit the signal!

    def add_cards(self, cards):
        self._cards.extend(cards)
        self.new_cards.emit()

    def clear(self):
        self._cards.clear()
        self.new_cards.emit()

    def __iter__(self):
        return iter(self._cards)

    def __len__(self):
        return len(self._cards)

    def flip(self):
        pass

    def flipped(self):
        return False


class HandModel(Hand, CardsModel):
    def __init__(self):
        Hand.__init__(self)
        CardsModel.__init__(self)
        # Additional state needed by the UI
        self.flipped_cards = True

    def __iter__(self):
        return iter(self.cards)

    def flip(self): # Flips over the cards (to hide them)
        self.flipped_cards = not self.flipped_cards
        self.new_cards.emit()  # something changed, better emit the signal!

    def flipped(self):
        # This model only flips all or no cards, so we don't care about the index.
        return self.flipped_cards

    def add_card(self, card):
        super().add_card(card)
        self.new_cards.emit()  # something changed, better emit the signal!


class TexasHoldemModel(QObject):
    winner_found = pyqtSignal(str)
    player_turn_changed = pyqtSignal()
    money_changed = pyqtSignal()
    raised_twice = pyqtSignal()
    no_raise = pyqtSignal()
    player_ran_out_of_money = pyqtSignal(str)

    def __init__(self,playernames,playerbalances):
        super().__init__()
        self.deck = StandardDeck()
        self.deck.shuffle()
        self.table = TableModel()
        self.players = [Player(playernames[0], init_money = playerbalances[0]), Player(playernames[1], init_money = playerbalances[1])]
        self.pot = 0
        for player in self.players:
            player.hand.add_card(self.deck.draw())
            player.hand.add_card(self.deck.draw())
        self.turn = 0
        self.notturn = 1
        self.call_count = 0
        self.raise_count = 0
        self.player_folded = False
        self.player_called = False


    def next_turn(self):
        self.turn = (self.turn + 1) % len(self.players)
        self.notturn = (self.notturn + 1) % len(self.players)
        self.player_turn_changed.emit()

    def new_round(self):
        if self.player_folded == True:
            self.winner = self.turn
            self.player_folded = False
        else:
            self.self.check_winner()
            self.add_table_card()
            self.player_turn_changed.emit()
        self.new_game()

    def new_game(self):
        self.table.clear()
        self.deck = StandardDeck()
        self.deck.shuffle()
        self.call_count = 0
        self.raise_count = 0
        self.pot = 0
        for player in range(2):
            self.players[player].hand.drop_cards([0,1])
            self.players[player].hand.add_card(self.deck.draw())
            self.players[player].hand.add_card(self.deck.draw())

    def call(self):
        self.player_called = True
        self.call_count += 1
        self.raise_count = 0
        self.no_raise.emit()

        if self.players[self.turn].money_amount >= self.bet:
            self.players[self.turn].remove_money(self.bet)
        else:
            self.players[self.turn].remove_money(self.players[self.turn].money_amount)
        self.pot += self.bet
        self.bet = 0

        if self.call_count > 1:
            self.call_count = 0
            self.add_table_card()
        self.money_changed.emit()
        self.next_turn()

    def raise_bet(self, value):
        self.players[self.turn].remove_money(value)
        self.bet = value
        self.pot += self.bet
        self.call_count += 1
        if self.call_count > 2:
            self.call_count = 0
        self.raise_count += 1
        if self.raise_count > 1:
            self.raised_twice.emit()
        self.money_changed.emit()
        self.next_turn()

    def fold(self):
        self.players[self.notturn].add_money(self.pot)
        self.winner_found.emit(f"{self.players[self.notturn].name} won {self.pot} sek, because {self.players[self.turn].name} folded!")
        self.pot = 0
        if self.players[self.turn].money_amount == 0:
            self.player_ran_out_of_money.emit(self.players[self.turn].name)
        self.money_changed.emit()
        self.next_turn()
        self.new_game()

    def split_pot(self):
        self.players[0].add_money(self.pot/2)
        self.players[1].add_money(self.pot/2)
        self.money_changed.emit()

    def add_table_card(self):
        if len(self.table) == 0:
            self.table.add_cards([self.deck.draw(), self.deck.draw(), self.deck.draw()])
        elif len(self.table) == 3 or len(self.table) == 4:
            self.table.add_card(self.deck.draw())
        elif len(self.table) == 5:
            self.check_winner()

    def check_winner(self):
        player1_besthand = self.players[0].hand.best_poker_hand(self.table._cards)
        player2_besthand = self.players[1].hand.best_poker_hand(self.table._cards)
        if player1_besthand < player2_besthand:
            self.winner_found.emit(f"{self.players[1].name} won {self.pot} sek, with {player1_besthand}!")
            self.players[1].add_money(self.pot)
        elif player1_besthand == player2_besthand:
            self.winner_found.emit(f"{self.players[0].name} and {self.players[1].name} tied, with {player1_besthand}, getting {self.pot/2} sek each!")
            self.split_pot()
        else:
            self.winner_found.emit(f"{self.players[0].name} won {self.pot} sek, with {player1_besthand}!")
            self.players[0].add_money(self.pot)
        if self.players[self.turn].money_amount == 0:
            self.player_ran_out_of_money.emit(self.players[self.turn].name)
        else:
            pass
        self.money_changed.emit()
        self.new_game()


class Player(QObject):
    bet_changed = pyqtSignal()
    balance_changed = pyqtSignal()
    def __init__(self, name, init_money):
        super().__init__()
        self.name = name
        self.balance = init_money
        self.hand = HandModel()
        self.pot = 0
        self.start_money = init_money
        self.money_amount = self.start_money

    def remove_money(self, amount: int):
        self.money_amount -= amount
        self.pot += amount
        self.balance_changed.emit()

    def add_money(self, amount: int):
        self.money_amount += amount
        self.balance_changed.emit()


